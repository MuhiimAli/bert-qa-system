Training examples: 27847
Number of training batches: 435
Evaluation examples: 1743
Number of evaluation batches: 28
Some weights of DistilBertForQA were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['distilbert.qa_outputs.bias', 'distilbert.qa_outputs.weight', 'distilbert.qa_type.bias', 'distilbert.qa_type.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Traceback (most recent call last):
  File "/oscar/home/mali37/bert-qa/main.py", line 72, in run_sweep
    return train_with_params(args, use_wandb=True)
  File "/oscar/home/mali37/bert-qa/main.py", line 48, in train_with_params
    model = train(args, data, tokenizer, use_wandb)
  File "/oscar/home/mali37/bert-qa/train.py", line 249, in train
    model = DistilBertForQA.from_pretrained('distilbert-base-uncased').to(device)
  File "/users/mali37/.local/lib/python3.9/site-packages/transformers/modeling_utils.py", line 2724, in to
    return super().to(*args, **kwargs)
  File "/users/mali37/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1340, in to
    return self._apply(convert)
  File "/users/mali37/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 900, in _apply
    module._apply(fn)
  File "/users/mali37/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 900, in _apply
    module._apply(fn)
  File "/users/mali37/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 927, in _apply
    param_applied = fn(param)
  File "/users/mali37/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1326, in convert
    return t.to(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 90.00 MiB. GPU 0 has a total capacity of 23.64 GiB of which 9.06 MiB is free. Process 2460814 has 22.93 GiB memory in use. Including non-PyTorch memory, this process has 700.00 MiB memory in use. Of the allocated memory 485.08 MiB is allocated by PyTorch, and 16.92 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)